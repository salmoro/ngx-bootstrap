{"version":3,"file":"ngx-bootstrap-progressbar.mjs","sources":["../../../../src/progressbar/bar.component.ts","../../../../src/progressbar/bar.component.html","../../../../src/progressbar/progressbar.config.ts","../../../../src/progressbar/progressbar.component.html","../../../../src/progressbar/progressbar.component.ts","../../../../src/progressbar/progressbar.module.ts","../../../../src/progressbar/ngx-bootstrap-progressbar.ts"],"sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { isBs3 } from 'ngx-bootstrap/utils';\r\nimport { ProgressbarType } from './progressbar-type.interface';\r\n\r\n@Component({\r\n  selector: 'bar',\r\n  templateUrl: './bar.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    role: 'progressbar',\r\n    'aria-valuemin': '0',\r\n    '[class.progress-bar]': 'true',\r\n    '[class.progress-bar-animated]': '!isBs3 && animate',\r\n    '[class.progress-bar-striped]': 'striped',\r\n    '[class.active]': 'isBs3 && animate',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[style.height.%]': '\"100\"',\r\n    '[style.width.%]': 'percent'\r\n  }\r\n})\r\nexport class BarComponent implements OnChanges {\r\n  /** maximum total value of progress element */\r\n  @Input() max = 100;\r\n\r\n  /** current value of progress bar */\r\n  @Input() value? = 0;\r\n\r\n  /** if `true` changing value of progress bar will be animated */\r\n  @Input() animate? = false;\r\n\r\n  /** If `true`, striped classes are applied */\r\n  @Input() striped? = false;\r\n\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type?: ProgressbarType = 'info';\r\n\r\n  percent = 100;\r\n\r\n  get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  private _prevType?: string;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes[\"value\"] || changes[\"max\"]) {\r\n      this.percent = 100 * (Number(changes[\"value\"]?.currentValue || this.value)\r\n        / Number((changes[\"max\"]?.currentValue || this.max) || 100));\r\n    }\r\n\r\n    if (changes[\"type\"]) {\r\n      this.applyTypeClasses();\r\n    }\r\n  }\r\n\r\n  private applyTypeClasses(): void {\r\n    if (this._prevType) {\r\n      const barTypeClass = `progress-bar-${this._prevType}`;\r\n      const bgClass = `bg-${this._prevType}`;\r\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\r\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\r\n      this._prevType = void 0;\r\n    }\r\n\r\n    if (this.type) {\r\n      const barTypeClass = `progress-bar-${this.type}`;\r\n      const bgClass = `bg-${this.type}`;\r\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\r\n      this.renderer.addClass(this.el.nativeElement, bgClass);\r\n      this._prevType = this.type;\r\n    }\r\n  }\r\n}\r\n","<ng-content></ng-content>\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressbarConfig {\r\n  /** if `true` changing value of progress bar will be animated */\r\n  animate = false;\r\n  /** maximum total value of progress element */\r\n  max = 100;\r\n}\r\n","<ng-container *ngIf=\"!isStacked then NotStacked else Stacked\"></ng-container>\r\n\r\n<ng-template #NotStacked>\r\n  <bar [type]=\"type\" [value]=\"_value\" [max]=\"max\" [animate]=\"animate\" [striped]=\"striped\">\r\n    <ng-content></ng-content>\r\n  </bar>\r\n</ng-template>\r\n\r\n<ng-template #Stacked>\r\n  <bar *ngFor=\"let item of _values\"\r\n       [type]=\"item.type\" [value]=\"item.value\" [max]=\"item.max || max\" [animate]=\"animate\" [striped]=\"striped\">{{ item.label }}</bar>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { BarValue, ProgressbarType } from './progressbar-type.interface';\r\nimport { ProgressbarConfig } from './progressbar.config';\r\n\r\n@Component({\r\n  selector: 'progressbar',\r\n  templateUrl: './progressbar.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\r\n  host: {\r\n    '[class.progress]': 'true',\r\n    '[attr.max]': 'max'\r\n  },\r\n  styles: [`\r\n    :host {\r\n      width: 100%;\r\n      display: flex;\r\n    } `]\r\n})\r\nexport class ProgressbarComponent {\r\n  /** maximum total value of progress element */\r\n  @Input() max = 100;\r\n\r\n  /** if `true` changing value of progress bar will be animated */\r\n  @Input() animate = false;\r\n\r\n  /** If `true`, striped classes are applied */\r\n  @Input() striped = false;\r\n\r\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\r\n  @Input() type?: ProgressbarType;\r\n\r\n  /** current value of progress bar. Could be a number or array of objects\r\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\r\n   */\r\n  @Input()\r\n  set value(value: number | BarValue[]) {\r\n    this.isStacked = Array.isArray(value);\r\n    if (typeof value === 'number') {\r\n      this._value = value;\r\n      this._values = void 0;\r\n    } else {\r\n      this._value = void 0;\r\n      this._values = value;\r\n    }\r\n  }\r\n\r\n  isStacked = false;\r\n  _value? = 0;\r\n  _values?: BarValue[];\r\n\r\n  constructor(config: ProgressbarConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BarComponent } from './bar.component';\r\nimport { ProgressbarComponent } from './progressbar.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BarComponent, ProgressbarComponent],\r\n  exports: [BarComponent, ProgressbarComponent]\r\n})\r\nexport class ProgressbarModule {\r\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\r\n    return { ngModule: ProgressbarModule, providers: [] };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}