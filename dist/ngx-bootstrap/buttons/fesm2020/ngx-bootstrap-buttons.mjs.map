{"version":3,"file":"ngx-bootstrap-buttons.mjs","sources":["../../../../src/buttons/button-checkbox.directive.ts","../../../../src/buttons/button-radio.directive.ts","../../../../src/buttons/button-radio-group.directive.ts","../../../../src/buttons/buttons.module.ts","../../../../src/buttons/ngx-bootstrap-buttons.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\ntype AvailableValues = boolean | string | number;\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue:AvailableValues = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse:AvailableValues = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value?: AvailableValues;\r\n  protected isDisabled = false;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): AvailableValues {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): AvailableValues {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  Optional,\r\n  Provider,\r\n  Renderer2,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnChanges {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio?: string;\r\n  /** If `true` — radio button can be unchecked */\r\n  @Input() uncheckable = false;\r\n  /** Current value of radio component or group */\r\n  @Input()\r\n  get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: string | undefined) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n    this._onChange(value);\r\n  }\r\n  /** If `true` — radio button is disabled */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('attr.aria-disabled')\r\n  get controlOrGroupDisabled() {\r\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\r\n  }\r\n\r\n  @HostBinding('class.disabled')\r\n  get hasDisabledClass() {\r\n    // Although the radio is disabled the active radio should still stand out.\r\n    // The disabled class will prevent this so don't add it on the active radio\r\n    return this.controlOrGroupDisabled && !this.isActive;\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-checked')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radio';\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): undefined | number {\r\n    if (this.controlOrGroupDisabled) {\r\n      // Disabled radio buttons should not receive focus\r\n      return undefined;\r\n    } else if (this.isActive || this.group == null) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  get hasFocus(): boolean {\r\n    return this._hasFocus;\r\n  }\r\n\r\n  private _value?: string;\r\n  private _disabled = false;\r\n  private _hasFocus = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2,\r\n    @Optional()\r\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\r\n    private group: ButtonRadioGroupDirective\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  toggleIfAllowed(): void {\r\n    if (!this.canToggle()) {\r\n      return;\r\n    }\r\n\r\n    if (this.uncheckable && this.btnRadio === this.value) {\r\n      this.value = undefined;\r\n    } else {\r\n      this.value = this.btnRadio;\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.space', ['$event'])\r\n  onSpacePressed(event: KeyboardEvent) {\r\n    this.toggleIfAllowed();\r\n    event.preventDefault();\r\n  }\r\n\r\n  focus() {\r\n    this.el.nativeElement.focus();\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  canToggle(): boolean {\r\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if ('uncheckable' in changes) {\r\n      this.uncheckable = this.uncheckable !== false && typeof this.uncheckable !== 'undefined';\r\n    }\r\n  }\r\n\r\n  _onChange(value?: string): void {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    this._disabled = disabled;\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  ContentChildren,\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Provider,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\r\n\r\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\r\n  radioButtons?: QueryList<ButtonRadioDirective>;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  private _value?: string;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: string | undefined) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n  }\r\n\r\n  private _disabled = false;\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): null | number {\r\n    if (this._disabled) {\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  writeValue(value?: string): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (this.radioButtons) {\r\n      this._disabled = disabled;\r\n      this.radioButtons.forEach(buttons => {\r\n        buttons.setDisabledState(disabled);\r\n      });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n    if (activeRadio) {\r\n      activeRadio.focus();\r\n      return;\r\n    }\r\n\r\n    if (this.radioButtons) {\r\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\r\n      if (firstEnabled) {\r\n        firstEnabled.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.ArrowRight', ['$event'])\r\n  @HostListener('keydown.ArrowDown', ['$event'])\r\n  selectNext(event: KeyboardEvent) {\r\n    this.selectInDirection('next');\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown.ArrowLeft', ['$event'])\r\n  @HostListener('keydown.ArrowUp', ['$event'])\r\n  selectPrevious(event: KeyboardEvent) {\r\n    this.selectInDirection('previous');\r\n    event.preventDefault();\r\n  }\r\n\r\n  private selectInDirection(direction: 'next' | 'previous') {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n\r\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\r\n      const step = direction === 'next' ? 1 : -1;\r\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\r\n      if (calcIndex < 0) {\r\n        calcIndex = buttonRadioDirectives.length - 1;\r\n      }\r\n\r\n      return calcIndex;\r\n    }\r\n\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n\r\n    if (activeRadio && this.radioButtons) {\r\n      const buttonRadioDirectives = this.radioButtons.toArray();\r\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\r\n      for (\r\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\r\n        i !== currentActiveIndex;\r\n        i = nextIndex(i, buttonRadioDirectives)\r\n      ) {\r\n        if (buttonRadioDirectives[i].canToggle()) {\r\n          buttonRadioDirectives[i].toggleIfAllowed();\r\n          buttonRadioDirectives[i].focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\r\n    if (!this.radioButtons) {\r\n      return void 0;\r\n    }\r\n\r\n    return this.radioButtons.find(button => button.isActive)\r\n      || this.radioButtons.find(button => button.hasFocus);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":"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"}